package com.example.ghcopilot;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import java.util.HashMap;
import java.util.Map;

// code generated by Github Copilot Chat (including package and imports)
@RestController
public class CalculatorController {

    private final CalculatorService calculatorService;

    public CalculatorController(CalculatorService calculatorService) {
        this.calculatorService = calculatorService;
    }

    @GetMapping("/add")
    public ResponseEntity<Map<String, Integer>> add(@RequestParam Integer first, @RequestParam Integer second) {
        validateInput(first, second);
        int result = calculatorService.add(first, second);
        return ResponseEntity.ok(createResponse(result));
    }

    @GetMapping("/subtract")
    public ResponseEntity<Map<String, Integer>> subtract(@RequestParam Integer first, @RequestParam Integer second) {
        validateInput(first, second);
        int result = calculatorService.subtract(first, second);
        return ResponseEntity.ok(createResponse(result));
    }

    @GetMapping("/multiply")
    public ResponseEntity<Map<String, Integer>> multiply(@RequestParam Integer first, @RequestParam Integer second) {
        validateInput(first, second);
        int result = calculatorService.multiply(first, second);
        return ResponseEntity.ok(createResponse(result));
    }

    @GetMapping("/divide")
    public ResponseEntity<Map<String, Integer>> divide(@RequestParam Integer first, @RequestParam Integer second) {
        validateInput(first, second);
        if (second == 0) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Cannot divide by zero");
        }
        int result = calculatorService.divide(first, second);
        return ResponseEntity.ok(createResponse(result));
    }

    private void validateInput(Integer first, Integer second) {
        if (first == null || second == null) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Invalid input");
        }
    }

    private Map<String, Integer> createResponse(int result) {
        Map<String, Integer> response = new HashMap<>();
        response.put("answer", result);
        return response;
    }
}
